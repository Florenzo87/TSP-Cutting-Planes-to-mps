Beispiel 1 (Satz 4.2):
int n = 8;
double c[29] = { 0, 1, 2, 3, 3, 2, 3, 4, 3, 2, 4, 3, 2, 3, 1, 2, 3, 5, 4, 4, 4, 4, 3, 1, 3, 2, 2, 3, 1};
std::string combtype = "simple";
sollte Lösung 12,5 haben
std::string combtype = "comb";
sollte Lösung 13 haben
GELÖST

Beispiel 2 (Satz 5.6):
n=9;
double bignum = 100;
std::vector<double> cost = {0, 6, 6.75, 0, bignum, bignum, bignum, 5, bignum, 6.75, bignum, 0, bignum, bignum, bignum, 5, 6, 6, 5, 5, bignum, bignum, 5, bignum, bignum, 5, bignum, bignum, bignum, bignum, 5, 0, 5, bignum, bignum, 5, 5};
n=8;
std::vector<double> cost = {0, 2, bignum, 2, 1, 4, bignum, bignum, 4, bignum, bignum, bignum, 0, bignum, 1, bignum, bignum, bignum, 4, bignum, bignum, bignum, 1, 1, bignum, 2, 4, bignum, 2};
chvatal und simple

Beispiel 3 (Satz 6.2):
int n = 7;
double c[22] = {0, 1, 1, 2, 2, 3, 4, 2, 2, 3, 2, 3, 1, 2, 4, 3, 3, 3, 2, 2, 2, 1};
std::string combtype = "chvatal";
sollte Lösung 11 haben
std::string combtype = "blossom";
sollte Lösung 10,5 haben
GELÖST

Beipsiel 4 (Satz 6.6):
int n = 9;
double c[37] = {0, 1, 2, 1, 2, 3, 1, 2, 3, 1, 2, 3, 2, 2, 3, 2, 3, 2, 1, 3, 2, 1, 1, 2, 1, 2, 3, 1, 2, 3, 2, 3, 2, 1, 1, 2, 1};
std::string combtype = "subtour";
sollte Lösung 9 haben
std::string combtype = "blossom";
sollte Lösung 10 haben
GELÖST
int n = 6;
std::vector<double> cost = {0, 2, 3, 2, bignum, bignum, 2, bignum, 0, bignum, bignum, bignum, 2, 2, 3, 2};

Beispiel 5 (Satz 7.6):
int n = 9;
//double c[37] = {0, 2, 2, 1, 3, 2, 4, 3, 5, 2, 3, 3, 4, 4, 3, 3, 3, 1, 5, 3, 5, 4, 2, 3, 5, 4, 6, 5, 4, 6, 4, 2, 1, 3, 3, 1, 3};
double c[37] = {0, 2, 5, 1, 5, 2, 5, 5, 5, 2, 5, 5, 5, 5, 3, 3, 5, 1, 5, 3, 5, 5, 2, 5, 5, 4, 5, 5, 5, 5, 4, 2, 1, 5, 5, 1, 3};
std::string combtype = "simple";
sollte Lösung 16,66 haben
std::string combtype = "domino";
sollte eine kleinere Lösung haben
(muss auch noch implementiert werden)
PROBLEME MIT SIMPLE

Beispiel 6 (Satz 8.8):
int n = 12;
double c[67] = {0, 1, 10, 10, 1, 10, 10, 10, 10, 10, 10, 10, 10, 5, 10, 10, 10, 1, 10, 10, 10, 10, 1, 5, 10, 10, 10, 1, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1, 3, 10, 10, 3, 10, 10, 10, 2, 10, 3, 4, 10, 10, 3, 3, 2, 10, 10, 10, 10, 2, 10, 10, 10, 10, 3, 3, 2};
std::string combtype = "comb";
sollte Lösung 21,66 haben

Beispiel 7+8+9+10 (S.49-51):
ZU GROß

Beispeil 11 (S.63):
n = 15;
{{100, 0}, {100, 200}, {100, 400}, {200, 0}, {200, 200}, {200, 400}, {300, 0}, {300, 200}, {300, 400}, {400, 0}, {400, 200}, {400, 400}, {500, 0}, {500, 200}, {500, 400}};
cliquetree und comb

Beipsiel 12 (S.65):
n = 17;
{{37.4393516691, 541.2090699418}, {112.7478815786, 529.4177578260}, {141.4875865042, 504.8184855710}, {98.7899036592, 384.5926031158}, {104.6531165914, 482.8224768783}, {58.7766988363, 507.1712386832}, {54.5248980387, 438.5515408431}, {228.8325218994, 410.4461939615}, {22.7642703744, 455.5340094037}, {10.0260950143, 488.9310558282}, {42.5331441666, 656.3645162886}, {22.6471035906, 526.2470392816}, {141.4507014379, 485.2477927763}, {144.6002949996, 457.4224283926}, {212.3725077442, 594.9216893413}, {176.5941623792, 648.5239953299}, {172.3088330830, 344.3963466366}, {197.8969269840, 512.3888960980}}
comb und simple

Beispiel 13 (S.67):
n = 14;
{{0, 5000}, {0, 7000}, {3500, 6000}, {7000, 5000}, {7000, 7000}, {10500, 8000}, {10500, 4000}, {10000, 1000}, {3000, 0}, {0, 2000}, {0, 10000}, {5000, 15000}, {10000, 11000}, {7000, 1000}}
chvatal und blossom

Beispiel 14 (S.68)
n = 12;
{{100, 0}, {100, 173.20508075688772}, {100, 346.41016151377545}, {200, 0}, {200, 173.20508075688772}, {200, 346.41016151377545}, {300, 0}, {300, 173.20508075688772}, {300, 346.41016151377545}, {400, 0}, {400, 173.20508075688772}, {400, 346.41016151377545}}
blossom und subtour

Eigene Beispiele:
n=9;
double bignum = 100;
std::vector<double> cost = {0, 6, 6.75, 0, bignum, bignum, bignum, 5, bignum, 6.75, bignum, 0, bignum, bignum, bignum, 5, 6, 6, 5, 5, bignum, bignum, 5, bignum, bignum, 5, bignum, bignum, bignum, bignum, 5, 0, 5, bignum, bignum, 5, 5};
chvatal und simple





n=9;
{2, bignum, 2, bignum, bignum, 2, bignum, bignum, 2, bignum, 1, bignum, bignum, bignum, bignum, bignum, bignum, 1, bignum, bignum, 2, bignum, bignum, 2, 2, bignum, 2, bignum, 2, bignum, bignum, 3, 2, bignum, 2, 2}

n=9;
{0, 1, bignum, 2, bignum, bignum, bignum, 1, bignum, bignum, bignum, 2, bignum, bignum, bignum, 1, 1, 1, 1, 1, bignum, bignum, bignum, bignum, bignum, 1, bignum, bignum, bignum, bignum, 1, 2, bignum, bignum, bignum, bignum, 2}

n=9;
{0, 2, bignum, 1, bignum, bignum, bignum, 2, bignum, bignum, bignum, 1, bignum, bignum, bignum, 2, 2, 2, 2, 2, bignum, bignum, bignum, bignum, bignum, 2, bignum, bignum, bignum, bignum, 2, 1, 2, bignum, bignum, 2, 2}